{"version":3,"sources":["components/appHeader/AppHeader.js","components/spinner/Spinner.js","services/MarvelService.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/app/App.js","index.js"],"names":["AppHeader","className","href","Spinner","xmlns","style","margin","background","display","width","height","viewBox","preserveAspectRatio","transform","cx","cy","r","fill","fillOpacity","attributeName","type","begin","values","keyTimes","dur","repeatCount","MarvelService","_apiBase","_apiKey","_baseOffset","getResources","url","a","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","ErrorMessage","src","img","alt","objectFit","RandomChar","state","loading","error","marvelService","onCharLoaded","descr","slice","length","sortObj","imgStyle","setState","onError","onLoading","updateChar","Math","floor","random","then","catch","this","console","log","clearInterval","timerId","errorMessage","spinner","content","onClick","mjolnir","Component","View","CharList","activeElem","newItemLoading","charEnded","start","scrollUpdate","document","documentElement","scrollHeight","scrollTop","clientHeight","onRequest","onDataLoading","updateData","newData","ended","changeActiveElem","props","onCharSelected","window","addEventListener","removeEventListener","filterData","item","clazz","tabIndex","onFocus","loadingFilter","errorFilter","disabled","Skeleton","CharInfo","charId","prevProps","prevState","skeleton","sortComics","i","ErrorBoundary","errorInfo","children","App","selectedChar","decoration","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c2432658.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","const Spinner = () => {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin: '0 auto', background: 'none', display: 'block'}} width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <g transform=\"translate(80,50)\">\r\n            <g transform=\"rotate(0)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"1\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.875s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.875s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,71.21320343559643)\">\r\n            <g transform=\"rotate(45)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.875\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.75s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.75s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(50,80)\">\r\n            <g transform=\"rotate(90)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.75\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.625s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.625s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.786796564403577,71.21320343559643)\">\r\n            <g transform=\"rotate(135)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.625\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.5s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.5s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(20,50.00000000000001)\">\r\n            <g transform=\"rotate(180)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.5\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.375s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.375s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(28.78679656440357,28.786796564403577)\">\r\n            <g transform=\"rotate(225)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.375\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.25s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.25s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(49.99999999999999,20)\">\r\n            <g transform=\"rotate(270)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.25\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"-0.125s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"-0.125s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g><g transform=\"translate(71.21320343559643,28.78679656440357)\">\r\n            <g transform=\"rotate(315)\">\r\n            <circle cx=\"0\" cy=\"0\" r=\"7\" fill=\"#ff0000\" fillOpacity=\"0.125\">\r\n            <animateTransform attributeName=\"transform\" type=\"scale\" begin=\"0s\" values=\"1.5 1.5;1 1\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\"></animateTransform>\r\n            <animate attributeName=\"fillOpacity\" keyTimes=\"0;1\" dur=\"1s\" repeatCount=\"indefinite\" values=\"1;0\" begin=\"0s\"></animate>\r\n            </circle>\r\n            </g>\r\n            </g>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","class MarvelService {\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/'\r\n    _apiKey = 'apikey=8908329978fa60bc56b08df9a2c63a09'\r\n    _baseOffset = 210\r\n\r\n    getResources = async (url) => {\r\n        let res = await fetch(url)\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`)\r\n        }\r\n\r\n        return await res.json()\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res = await this.getResources(\r\n            `${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`\r\n        )\r\n        return res.data.results.map(this._transformCharacter)\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResources(\r\n            `${this._apiBase}characters/${id}?limit=9&offset=210&${this._apiKey}`\r\n        )\r\n        return this._transformCharacter(res.data.results[0])\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            id: char.id,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        // <img alt='error' src={process.env.PUBLIC_URL + '/error.gif'}/>\r\n        <img src={img} alt=\"Error\" style={{display: 'block',\r\n        width: '250px', height: '250px', objectFit: 'contain',\r\n        margin: '0 auto'}}\r\n        />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { Component } from 'react'\nimport Spinner from '../spinner/Spinner'\nimport MarvelService from '../../services/MarvelService'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './randomChar.scss'\nimport mjolnir from '../../resources/img/mjolnir.png'\n\nclass RandomChar extends Component {\n    state = {\n        char: {},\n        loading: true,\n        error: false,\n    }\n\n    marvelService = new MarvelService()\n\n    componentDidMount() {\n        this.updateChar()\n        // this.timerId = setInterval(this.updateChar, 3000)\n        console.log('Mount')\n    }\n\n    componentDidUpdate() {\n        console.log('update')\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerId)\n        console.log('remove')\n    }\n\n    onCharLoaded = (char) => {\n        // console.log(char)\n        let descr = char.description\n        let img = 'cover'\n        if (char.thumbnail.slice(-23, -4) === 'image_not_available') {\n            img = 'contain'\n        }\n        if (descr.length === 0) {\n            descr = 'There is no description for this character.'\n        }\n        if (descr.length >= 210) {\n            descr = descr.slice(0, 180)\n        }\n        const sortObj = { ...char, description: descr, imgStyle: img }\n        this.setState({ char: sortObj, loading: false }) // char: char\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true,\n        })\n    }\n\n    onLoading = () => {\n        this.setState({\n            loading: true,\n            error: false,\n        })\n    }\n\n    updateChar = () => {\n        // this.setState({ loading: true, error: false })\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000)\n        this.onLoading()\n        this.marvelService\n            .getCharacter(id)\n            .then(this.onCharLoaded) // тоже самое res => this.onCharLoaded(res)\n            // .getAllCharacters()\n            // .then(res => console.log(res))\n            .catch(this.onError)\n    }\n\n    render() {\n        console.log('render')\n        const { char, loading, error } = this.state\n        const errorMessage = error ? <ErrorMessage /> : null\n        const spinner = loading ? <Spinner /> : null\n        const content = !loading && !error ? <View char={char} /> : null\n        // !(loading || error)\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!\n                        <br />\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">Or choose another one</p>\n                    <button\n                        onClick={this.updateChar}\n                        className=\"button button__main\"\n                    >\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img\n                        src={mjolnir}\n                        alt=\"mjolnir\"\n                        className=\"randomchar__decoration\"\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, imgStyle } = char\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                style={{\n                    objectFit: imgStyle,\n                }}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n            />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar\n// import { Component } from 'react';\n// import Spinner from '../spinner/Spinner';\n// import ErrorMessage from '../errorMessage/ErrorMessage';\n// import MarvelService from '../../services/MarvelService';\n\n// import './randomChar.scss';\n// import mjolnir from '../../resources/img/mjolnir.png';\n\n// class RandomChar extends Component {\n//     state = {\n//         char: {},\n//         loading: true,\n//         error: false\n//     }\n\n//     marvelService = new MarvelService();\n\n//     componentDidMount() {\n//         console.log('costruct')\n//         this.updateChar();\n//     }\n//     componentDidUpdate() {\n//         console.log('update')\n//     }\n\n//     onCharLoaded = (char) => {\n//         this.setState({\n//             char,\n//             loading: false\n//         })\n//     }\n\n//     onError = () => {\n//         this.setState({\n//             loading: false,\n//             error: true\n//         })\n//     }\n\n//     updateChar = () => {\n//         const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n//         this.marvelService\n//             .getCharacter(id)\n//             .then(this.onCharLoaded)\n//             .catch(this.onError);\n//     }\n\n//     render() {\n//         console.log('render')\n//         const {char, loading, error} = this.state;\n//         const errorMessage = error ? <ErrorMessage/> : null;\n//         const spinner = loading ? <Spinner/> : null;\n//         const content = !(loading || error) ? <View char={char}/> : null;\n\n//         return (\n//             <div className=\"randomchar\">\n//                 {errorMessage}\n//                 {spinner}\n//                 {content}\n//                 <div className=\"randomchar__static\">\n//                     <p className=\"randomchar__title\">\n//                         Random character for today!<br/>\n//                         Do you want to get to know him better?\n//                     </p>\n//                     <p className=\"randomchar__title\">\n//                         Or choose another one\n//                     </p>\n//                     <button onClick={this.updateChar} className=\"button button__main\">\n//                         <div className=\"inner\">try it</div>\n//                     </button>\n//                     <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n// const View = ({char}) => {\n//     const {name, description, thumbnail, homepage, wiki} = char;\n\n//     return (\n//         <div className=\"randomchar__block\">\n//             <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n//             <div className=\"randomchar__info\">\n//                 <p className=\"randomchar__name\">{name}</p>\n//                 <p className=\"randomchar__descr\">\n//                     {description}\n//                 </p>\n//                 <div className=\"randomchar__btns\">\n//                     <a href={homepage} className=\"button button__main\">\n//                         <div className=\"inner\">homepage</div>\n//                     </a>\n//                     <a href={wiki} className=\"button button__secondary\">\n//                         <div className=\"inner\">Wiki</div>\n//                     </a>\n//                 </div>\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default RandomChar;\n","import { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport Spinner from '../spinner/Spinner'\nimport MarvelService from '../../services/MarvelService'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\n\nimport './charList.scss'\n\nclass CharList extends Component {\n    state = {\n        data: [],\n        loading: true,\n        error: false,\n        activeElem: null,\n        newItemLoading: false,\n        offset: 210,\n        charEnded: false,\n        start: true\n    }\n\n    marvelService = new MarvelService()\n\n    componentDidMount() {\n        this.onRequest()\n        window.addEventListener('scroll', this.scrollUpdate)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.scrollUpdate)\n    }\n\n    scrollUpdate = () => {\n        if (document.documentElement.scrollHeight - document.documentElement.scrollTop \n            === document.documentElement.clientHeight\n            && !this.state.start \n            && !this.state.charEnded) {\n            this.onRequest(this.state.offset)\n        }\n    }\n\n    // getData = () => {\n    //     this.marvelService.getAllCharacters()\n    //         .then(this.updateData)\n    //         .catch(this.onError)\n    // }\n\n    onRequest = (offset) => {\n        this.onDataLoading()\n        this.marvelService.getAllCharacters(offset)\n            .then(this.updateData)\n            .catch(this.onError)\n    }\n\n\n    onDataLoading = () => {\n        this.setState({newItemLoading: true})\n    }\n\n    updateData = (newData) => {\n        let ended = false\n        if (newData.length < 9) {\n            ended = true\n        }\n\n        this.setState(({data, offset}) => ({\n            data: [...data, ...newData],\n            loading: false,\n            newItemLoading: false,\n            offset: offset + 9,\n            charEnded: ended,\n            start: false\n        }))\n    }\n\n    onError = () => {\n        this.setState({loading: false, error: true})\n    }\n\n    changeActiveElem = (id) => {\n        this.setState({activeElem: id})\n        this.props.onCharSelected(id)\n    }\n\n\n\n    // itemRefs = [];\n\n    // setRef = (ref) => {\n    //     this.itemRefs.push(ref);\n    // }\n\n    // focusOnItem = (id) => {\n    //     // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n    //     // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n    //     // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n    //     // в отдельный компонент. Но кода будет больше, появится новое состояние\n    //     // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n    //     // По возможности, не злоупотребляйте рефами, только в крайних случаях\n    //     this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n    //     this.itemRefs[id].classList.add('char__item_selected');\n    //     this.itemRefs[id].focus();\n    // }\n\n    // // Этот метод создан для оптимизации, \n    // // чтобы не помещать такую конструкцию в метод render\n    // renderItems(arr) {\n    //     const items =  arr.map((item, i) => {\n    //         let imgStyle = {'objectFit' : 'cover'};\n    //         if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    //             imgStyle = {'objectFit' : 'unset'};\n    //         }\n            \n    //         return (\n    //             <li \n    //                 className=\"char__item\"\n    //                 tabIndex={0}\n    //                 ref={this.setRef}\n    //                 key={item.id}\n    //                 onClick={() => {\n    //                     this.props.onCharSelected(item.id);\n    //                     this.focusOnItem(i);\n    //                 }}\n    //                 onKeyPress={(e) => {\n    //                     if (e.key === ' ' || e.key === \"Enter\") {\n    //                         this.props.onCharSelected(item.id);\n    //                         this.focusOnItem(i);\n    //                     }\n    //                 }}>\n    //                     <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n    //                     <div className=\"char__name\">{item.name}</div>\n    //             </li>\n    //         )\n    //     });\n\n\n    // changeFocusedElem = (e, id) => {\n    //     if (e.keyCode === 13) {\n    //         this.setState({activeElem: id})\n    //         this.props.onCharSelected(id)\n    //     }\n    // }\n\n    render() {\n        const { data, error, loading, newItemLoading, offset, charEnded } = this.state\n        \n        const filterData = data.map((item) => {\n            const { thumbnail, name, id } = item\n            let clazz = 'char__item'\n            if (id === this.state.activeElem) {\n                clazz += ' char__item_selected'\n            }\n            let imgStyle = 'cover'\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = 'fill'\n            }\n            return (\n                <li tabIndex={0} key={id} className={clazz}  /*onKeyDown={(e) => this.changeFocusedElem(e, id)}*/ onFocus={() => this.changeActiveElem(id)}>\n                    <img style={{objectFit: imgStyle}} src={thumbnail} alt=\"abyss\" />\n                    <div className=\"char__name\">{name}</div>\n                </li>\n            )\n        })\n\n        const loadingFilter = loading ? <Spinner /> : null\n        const errorFilter = error ? <ErrorMessage /> : null\n        const content = !loading && !error ? filterData : null\n\n        return (\n            <div className=\"char__list\">\n                <ul style={{display: loading || error ? 'flex' : 'grid'}} className=\"char__grid\">\n                    {content}\n                    {loadingFilter}\n                    {errorFilter}\n                </ul>\n                <button className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick={() => this.onRequest(offset)}\n                style={{display: charEnded ? 'none' : 'block'}}\n                >\n                    <div className=\"inner\">load more</div>\n                </button>\n            </div>\n        )\n    }\n}\n\n// const CharItem = ({ img, name }) => {\n//     let imgStyle = 'cover'\n//     if (img === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n//         imgStyle = 'fill'\n//     }\n//     return (\n//         <li className=\"char__item\">\n//             <img style={{objectFit: imgStyle}} src={img} alt=\"abyss\" />\n//             <div className=\"char__name\">{name}</div>\n//         </li>\n//     )\n// }\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Component } from 'react';\nimport PropTypes from 'prop-types'\n\nimport Skeleton from '../skeleton/Skeleton'\nimport MarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charInfo.scss';\n\nclass CharInfo extends Component{\n    state = {\n        char: null,\n        loading: false,\n        error: false,\n    }\n\n    marvelService = new MarvelService()\n\n    componentDidMount() {\n        this.updateChar()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // this.updateChar() - не надо дядя. ааааа... (произойдёт рекурсивный вызов)\n        if (this.props.charId !== prevProps.charId) {\n            this.updateChar()\n        }\n    }\n\n    // componentDidCatch(err, info) {\n    //     console.log(err, info)\n    //     this.setState({error: true})\n    // }\n\n    updateChar = () => {\n        const {charId} = this.props\n        if (!charId) {\n            return\n        }\n\n        this.onLoading()\n\n        this.marvelService\n            .getCharacter(charId)\n            .then(this.onCharLoaded)\n            .catch(this.onError)\n        \n    }\n\n    onCharLoaded = (char) => {\n        // let {comics} = char\n        // let clearComics = null\n\n        // if (comics.length > 10) {\n        //     comics = comics.slice(0, 10)\n        // }\n\n        // if (comics.length === 0) {\n        //     clearComics = 'This hero has no comics'\n        // }\n\n        // const obj = {...char, comics: comics, clearComics}\n\n        this.setState({ char, loading: false }) // char: char\n    }\n\n    onError = () => {\n        this.setState({\n            loading: false,\n            error: true,\n        })\n    }\n\n    onLoading = () => {\n        this.setState({\n            loading: true,\n            error: false,\n        })\n    }\n\n    render() {\n        const {char, loading, error} = this.state\n\n        const skeleton = char || loading || error ? null : <Skeleton/>\n        const errorMessage = error ? <ErrorMessage /> : null\n        const spinner = loading ? <Spinner /> : null\n        const content = !loading && !error && char  ? <View char={char} /> : null \n                                    //!(loading || error || !char)\n        return (\n            <div className=\"char__info\">\n                {errorMessage}\n                {spinner}\n                {content}\n                {skeleton}\n            </div>\n        )\n    }\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char\n\n    let imgStyle = {'objectFit': 'cover'}\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain'}\n    }\n\n    const sortComics = comics.slice(0, 10)\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img style={imgStyle} src={thumbnail} alt={name}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'This hero has no comics'}\n                    {\n                        sortComics.map((item,i) => {\n                            {/* if (i > 9) {\n                                return //неэффективный способ\n                            } */}\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\"\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    // static getDerivedStateFromError(error) {\r\n    //     return {error: true}\r\n    // }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({error: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { Component } from 'react'\n\nimport AppHeader from '../appHeader/AppHeader'\nimport RandomChar from '../randomChar/RandomChar'\nimport CharList from '../charList/CharList'\nimport CharInfo from '../charInfo/CharInfo'\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\n\nimport decoration from '../../resources/img/vision.png'\n\n\nclass App extends Component {\n    state = {\n        selectedChar: null\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar />\n                    </ErrorBoundary>\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected}/>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar}/>\n                        </ErrorBoundary>\n                    </div>\n                    <img\n                        className=\"bg-decoration\"\n                        src={decoration}\n                        alt=\"vision\"\n                    />\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}